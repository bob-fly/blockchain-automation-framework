apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: supplychain-orderer1
  namespace: supplychain-net
  annotations:
    fluxcd.io/automated: "false"
spec:
  releaseName: supplychain-orderer1
  chart:
    git: ssh://git@github.com/bob-fly/blockchain-automation-framework.git
    ref: test
    path: platforms/hyperledger-fabric/charts/orderernode
  values:
    metadata:
      namespace: supplychain-net
      images:
        orderer: hyperledger/fabric-orderer:1.4.4
        alpineutils: reg.hrlyit.com/hyperledgerlabs/alpine-utils:1.0
    annotations:  
      service:
        - example1: example2
      pvc:
      deployment:
    orderer:
      name: orderer1
      loglevel: info
      localmspid: supplychainMSP
      tlsstatus: true
      keepaliveserverinterval: 10s
    
    consensus:
      name: kafka

    storage:
      storageclassname: supplychainsc
      storagesize: 512Mi  

    service:
      servicetype: ClusterIP
      ports:
        grpc:
          clusteripport: 7050

    vault:
      address: http://sibo.local:8200
      role: vault-role
      authpath: dev2supplychain-net-auth
      secretprefix: secret/crypto/ordererOrganizations/supplychain-net/orderers/orderer1.supplychain-net
      imagesecretname: regcred
      serviceaccountname: vault-auth
    kafka:
      readinesscheckinterval: 10
      readinessthreshold: 10
      brokers:
      - kafka-0.broker.supplychain-net.svc.cluster.local:9092
      - kafka-1.broker.supplychain-net.svc.cluster.local:9092
      - kafka-2.broker.supplychain-net.svc.cluster.local:9092
      - kafka-3.broker.supplychain-net.svc.cluster.local:9092

    proxy:
      provider: none
      external_url_suffix: org1ambassador.blockchaincloudpoc.com

    genesis: |-
      
