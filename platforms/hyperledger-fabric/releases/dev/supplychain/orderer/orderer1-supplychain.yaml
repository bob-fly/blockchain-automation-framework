apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: supplychain-orderer1
  namespace: supplychain-net
  annotations:
    fluxcd.io/automated: "false"
spec:
  releaseName: supplychain-orderer1
  chart:
    git: ssh://git@github.com/bob-fly/blockchain-automation-framework.git
    ref: test
    path: platforms/hyperledger-fabric/charts/orderernode
  values:
    metadata:
      namespace: supplychain-net
      images:
        orderer: hyperledger/fabric-orderer:1.4.4
        alpineutils: reg.hrlyit.com/hyperledgerlabs/alpine-utils:1.0
    annotations:  
      service:
        - example1: example2
      pvc:
      deployment:
    orderer:
      name: orderer1
      loglevel: info
      localmspid: supplychainMSP
      tlsstatus: true
      keepaliveserverinterval: 10s
    
    consensus:
      name: raft

    storage:
      storageclassname: supplychainsc
      storagesize: 512Mi  

    service:
      servicetype: ClusterIP
      ports:
        grpc:
          clusteripport: 7050

    vault:
      address: http://sibo.local:8200
      role: vault-role
      authpath: dev2supplychain-net-auth
      secretprefix: secret/crypto/ordererOrganizations/supplychain-net/orderers/orderer1.supplychain-net
      imagesecretname: regcred
      serviceaccountname: vault-auth

    proxy:
      provider: none
      external_url_suffix: org1ambassador.blockchaincloudpoc.com

    genesis: |-
      CiIaIKHtmwjbox2Y8wsU7x1jy3SKDktaUfyEQ4jhDja6xtMoEvDpAQrs6QEK6OkBCngKWggBEAEaBgjqyNeMBiIKc3lzY2hhbm5lbCpAOGJkNWRiZDc5MDEwM2M3ZTczNTJhNjBkOTY4OGQyMmU4NDg4MzM3YWY2ODM1Y2Q1NzE4MWYyYWZlYTQxZGM5NBIaEhi8oSyzDTWAJRo+6RFjWgHtELHgutgksscS6ugBCuboARLi6AESwSsKB09yZGVyZXIStSsSshYKDnN1cHBseWNoYWluTVNQEp8WGqsUCgNNU1ASoxQSmBQSlRQKDnN1cHBseWNoYWluTVNQEuUFLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI5VENDQVp1Z0F3SUJBZ0lKQUlVK3pWMEJvdXJYTUFvR0NDcUdTTTQ5QkFNQ01GNHhDekFKQmdOVkJBWVQKQWtkQ01ROHdEUVlEVlFRSURBWk1iMjVrYjI0eER6QU5CZ05WQkFjTUJreHZibVJ2YmpFUU1BNEdBMVVFQ2d3SApUM0prWlhKbGNqRWJNQmtHQTFVRUF3d1NZMkV1YzNWd2NHeDVZMmhoYVc0dGJtVjBNQjRYRFRJeE1URXhPREExCk1UZ3hOVm9YRFRJME1Ea3dOekExTVRneE5Wb3dYakVMTUFrR0ExVUVCaE1DUjBJeER6QU5CZ05WQkFnTUJreHYKYm1SdmJqRVBNQTBHQTFVRUJ3d0dURzl1Wkc5dU1SQXdEZ1lEVlFRS0RBZFBjbVJsY21WeU1Sc3dHUVlEVlFRRApEQkpqWVM1emRYQndiSGxqYUdGcGJpMXVaWFF3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVI1CmxJNVdWQWwxUzI5MGg4WXNONkZoekpETFNIdTJ3QytrYy9FNGFuOUpQaFI4MUd4Tm54WGRtWmlWakpnWERUL1gKUEJVeUpKeEFZQThnd0pCWk5IZGhvMEl3UURBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUE0R0ExVWREd0VCL3dRRQpBd0lCcGpBZEJnTlZIUTRFRmdRVTl3UEZCb2pHcHFIRmdKeEYvTzhSNjZzczROa3dDZ1lJS29aSXpqMEVBd0lEClNBQXdSUUloQUkxc1d2VnpFMTFMWWtLNDVSNm9jS081M2RwVXc3ODlKWkxzckZiNytDK0tBaUJMNmJIVTJPbEEKTWhkcWlxUCtTQzlFYUZNVmhIMXR0RS95aFloTWdIUCtCdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KIqIILS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM0VENDQW9pZ0F3SUJBZ0lVQVoyOEJTRlVQT1ZKZDB0NHlMdUU5MVhRMGxnd0NnWUlLb1pJemowRUF3SXcKWGpFTE1Ba0dBMVVFQmhNQ1IwSXhEekFOQmdOVkJBZ01Ca3h2Ym1SdmJqRVBNQTBHQTFVRUJ3d0dURzl1Wkc5dQpNUkF3RGdZRFZRUUtEQWRQY21SbGNtVnlNUnN3R1FZRFZRUUREQkpqWVM1emRYQndiSGxqYUdGcGJpMXVaWFF3CkhoY05NakV4TVRFNE1EVXlNakF3V2hjTk1qSXhNVEU0TURVeU56QXdXakJzTVFzd0NRWURWUVFHRXdKSFFqRWIKTUJrR0ExVUVCeE1TTlRFdU5UQXZMVEF1TVRNdlRHOXVaRzl1TVJBd0RnWURWUVFLRXdkUGNtUmxjbVZ5TVE0dwpEQVlEVlFRTEV3VmhaRzFwYmpFZU1Cd0dBMVVFQXd3VlFXUnRhVzVBYzNWd2NHeDVZMmhoYVc0dGJtVjBNRmt3CkV3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFNmtsR0JBTkR6bW0zVUIvT2JmZjFtUTNBTmo5cElqQlMKUlpYNmdrcGV6SGZKbmUrRFc3U1ByL3Zibmk1Q2lCc1FCNXVsTVo0VXBkemcyL1pkQzNNMVZxT0NBUlF3Z2dFUQpNQTRHQTFVZER3RUIvd1FFQXdJSGdEQU1CZ05WSFJNQkFmOEVBakFBTUIwR0ExVWREZ1FXQkJRZ3hsRzB5dW85CkJnL2NtZlVmN20zaDl4MFpBREFmQmdOVkhTTUVHREFXZ0JUM0E4VUdpTWFtb2NXQW5FWDg3eEhycXl6ZzJUQWsKQmdOVkhSRUVIVEFiZ2hsallTMTBiMjlzY3kwM09EZGlOR1k1Wm1Oa0xXTmlZamw0TUlHSkJnZ3FBd1FGQmdjSQpBUVI5ZXlKaGRIUnljeUk2ZXlKaFltRmpMbWx1YVhRaU9pSjBjblZsSWl3aVlXUnRhVzRpT2lKMGNuVmxJaXdpCmFHWXVRV1ptYVd4cFlYUnBiMjRpT2lJaUxDSm9aaTVGYm5KdmJHeHRaVzUwU1VRaU9pSkJaRzFwYmtCemRYQncKYkhsamFHRnBiaTF1WlhRaUxDSm9aaTVVZVhCbElqb2lZV1J0YVc0aWZYMHdDZ1lJS29aSXpqMEVBd0lEUndBdwpSQUlnRHhieFpmVlZRc2dldmNzN2hXTk0ySXRLQnpVT3BPQkZZblpzTEd2bTZBQUNJQXlwVnJSLzAxQ2lvMjZKCmRWR0tFZjNEeHJ4ZURlK0NSdFNZQTZ3MjE2MWMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQpCDgoEU0hBMhIGU0hBMjU2SuUFLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI5VENDQVp1Z0F3SUJBZ0lKQUlVK3pWMEJvdXJYTUFvR0NDcUdTTTQ5QkFNQ01GNHhDekFKQmdOVkJBWVQKQWtkQ01ROHdEUVlEVlFRSURBWk1iMjVrYjI0eER6QU5CZ05WQkFjTUJreHZibVJ2YmpFUU1BNEdBMVVFQ2d3SApUM0prWlhKbGNqRWJNQmtHQTFVRUF3d1NZMkV1YzNWd2NHeDVZMmhoYVc0dGJtVjBNQjRYRFRJeE1URXhPREExCk1UZ3hOVm9YRFRJME1Ea3dOekExTVRneE5Wb3dYakVMTUFrR0ExVUVCaE1DUjBJeER6QU5CZ05WQkFnTUJreHYKYm1SdmJqRVBNQTBHQTFVRUJ3d0dURzl1Wkc5dU1SQXdEZ1lEVlFRS0RBZFBjbVJsY21WeU1Sc3dHUVlEVlFRRApEQkpqWVM1emRYQndiSGxqYUdGcGJpMXVaWFF3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVI1CmxJNVdWQWwxUzI5MGg4WXNONkZoekpETFNIdTJ3QytrYy9FNGFuOUpQaFI4MUd4Tm54WGRtWmlWakpnWERUL1gKUEJVeUpKeEFZQThnd0pCWk5IZGhvMEl3UURBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUE0R0ExVWREd0VCL3dRRQpBd0lCcGpBZEJnTlZIUTRFRmdRVTl3UEZCb2pHcHFIRmdKeEYvTzhSNjZzczROa3dDZ1lJS29aSXpqMEVBd0lEClNBQXdSUUloQUkxc1d2VnpFMTFMWWtLNDVSNm9jS081M2RwVXc3ODlKWkxzckZiNytDK0tBaUJMNmJIVTJPbEEKTWhkcWlxUCtTQzlFYUZNVmhIMXR0RS95aFloTWdIUCtCdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KGgZBZG1pbnMiOwoLRW5kb3JzZW1lbnQSLBIiCAESHhIIEgYIARICCAAaEhIQCg5zdXBwbHljaGFpbk1TUBoGQWRtaW5zIjcKB1JlYWRlcnMSLBIiCAESHhIIEgYIARICCAAaEhIQCg5zdXBwbHljaGFpbk1TUBoGQWRtaW5zIjcKB1dyaXRlcnMSLBIiCAESHhIIEgYIARICCAAaEhIQCg5zdXBwbHljaGFpbk1TUBoGQWRtaW5zIjgKBkFkbWlucxIuEiQIARIgEggSBggBEgIIABoUEhIKDnN1cHBseWNoYWluTVNQEAEaBkFkbWlucyoGQWRtaW5zGiIKCUJhdGNoU2l6ZRIVEgsIChCAgIAxGICAQBoGQWRtaW5zGh4KDEJhdGNoVGltZW91dBIOEgQKAjJzGgZBZG1pbnMaHwoTQ2hhbm5lbFJlc3RyaWN0aW9ucxIIGgZBZG1pbnMaJgoMQ2FwYWJpbGl0aWVzEhYSDAoKCgZWMV80XzISABoGQWRtaW5zGtASCg1Db25zZW5zdXNUeXBlEr4SErMSCghldGNkcmFmdBKmEgqPEgoub3JkZXJlcjEub3JnMWFtYmFzc2Fkb3IuYmxvY2tjaGFpbmNsb3VkcG9jLmNvbRD7QRrrCC0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlERnpDQ0FyMmdBd0lCQWdJVUdKdUJLaWlDVG5yK0FNVGVaR1htRnZxaFl0QXdDZ1lJS29aSXpqMEVBd0l3ClhqRUxNQWtHQTFVRUJoTUNSMEl4RHpBTkJnTlZCQWdNQmt4dmJtUnZiakVQTUEwR0ExVUVCd3dHVEc5dVpHOXUKTVJBd0RnWURWUVFLREFkUGNtUmxjbVZ5TVJzd0dRWURWUVFEREJKallTNXpkWEJ3YkhsamFHRnBiaTF1WlhRdwpIaGNOTWpFeE1URTRNRFV5TWpBd1doY05Nakl4TVRFNE1EVXlOekF3V2pCeE1Rc3dDUVlEVlFRR0V3SkhRakViCk1Ca0dBMVVFQnhNU05URXVOVEF2TFRBdU1UTXZURzl1Wkc5dU1SQXdEZ1lEVlFRS0V3ZFBjbVJsY21WeU1SQXcKRGdZRFZRUUxFd2R2Y21SbGNtVnlNU0V3SHdZRFZRUURFeGh2Y21SbGNtVnlNUzV6ZFhCd2JIbGphR0ZwYmkxdQpaWFF3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVFneG9hT1doWlRieWZoZVJkQUZjOWJSTmwrCncwQkJrNWpGZ0FqZU9xdy8wQmhKdVRiY3VQSzFLM1BWWDZHZTdsNkRSMzdHK1U2Q2xNK2QyZGFWSjlqam80SUIKUkRDQ0FVQXdEZ1lEVlIwUEFRSC9CQVFEQWdPb01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRgpCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjBHQTFVZERnUVdCQlFpNTNVSklKMlkwSzVKOHI0ekZWVGIvRVQrCkxEQWZCZ05WSFNNRUdEQVdnQlQzQThVR2lNYW1vY1dBbkVYODd4SHJxeXpnMlRCVEJnTlZIUkVFVERCS2doaHYKY21SbGNtVnlNUzV6ZFhCd2JIbGphR0ZwYmkxdVpYU0NMbTl5WkdWeVpYSXhMbTl5WnpGaGJXSmhjM05oWkc5eQpMbUpzYjJOclkyaGhhVzVqYkc5MVpIQnZZeTVqYjIwd2JBWUlLZ01FQlFZSENBRUVZSHNpWVhSMGNuTWlPbnNpCmFHWXVRV1ptYVd4cFlYUnBiMjRpT2lJaUxDSm9aaTVGYm5KdmJHeHRaVzUwU1VRaU9pSnZjbVJsY21WeU1TNXoKZFhCd2JIbGphR0ZwYmkxdVpYUWlMQ0pvWmk1VWVYQmxJam9pYjNKa1pYSmxjaUo5ZlRBS0JnZ3Foa2pPUFFRRApBZ05JQURCRkFpRUFndzYxNmJveURDVDFyaEtObU9JYUcxVkFlSkE4Q1Z1WnRWT2R3bFpncjJzQ0lCcXR0WnNFCnlTRElJMVRCZUtnVEVuK2RncmM3cXVlTlEwSnIyVHR0NXN0UQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCiLrCC0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlERnpDQ0FyMmdBd0lCQWdJVUdKdUJLaWlDVG5yK0FNVGVaR1htRnZxaFl0QXdDZ1lJS29aSXpqMEVBd0l3ClhqRUxNQWtHQTFVRUJoTUNSMEl4RHpBTkJnTlZCQWdNQmt4dmJtUnZiakVQTUEwR0ExVUVCd3dHVEc5dVpHOXUKTVJBd0RnWURWUVFLREFkUGNtUmxjbVZ5TVJzd0dRWURWUVFEREJKallTNXpkWEJ3YkhsamFHRnBiaTF1WlhRdwpIaGNOTWpFeE1URTRNRFV5TWpBd1doY05Nakl4TVRFNE1EVXlOekF3V2pCeE1Rc3dDUVlEVlFRR0V3SkhRakViCk1Ca0dBMVVFQnhNU05URXVOVEF2TFRBdU1UTXZURzl1Wkc5dU1SQXdEZ1lEVlFRS0V3ZFBjbVJsY21WeU1SQXcKRGdZRFZRUUxFd2R2Y21SbGNtVnlNU0V3SHdZRFZRUURFeGh2Y21SbGNtVnlNUzV6ZFhCd2JIbGphR0ZwYmkxdQpaWFF3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVFneG9hT1doWlRieWZoZVJkQUZjOWJSTmwrCncwQkJrNWpGZ0FqZU9xdy8wQmhKdVRiY3VQSzFLM1BWWDZHZTdsNkRSMzdHK1U2Q2xNK2QyZGFWSjlqam80SUIKUkRDQ0FVQXdEZ1lEVlIwUEFRSC9CQVFEQWdPb01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRgpCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjBHQTFVZERnUVdCQlFpNTNVSklKMlkwSzVKOHI0ekZWVGIvRVQrCkxEQWZCZ05WSFNNRUdEQVdnQlQzQThVR2lNYW1vY1dBbkVYODd4SHJxeXpnMlRCVEJnTlZIUkVFVERCS2doaHYKY21SbGNtVnlNUzV6ZFhCd2JIbGphR0ZwYmkxdVpYU0NMbTl5WkdWeVpYSXhMbTl5WnpGaGJXSmhjM05oWkc5eQpMbUpzYjJOclkyaGhhVzVqYkc5MVpIQnZZeTVqYjIwd2JBWUlLZ01FQlFZSENBRUVZSHNpWVhSMGNuTWlPbnNpCmFHWXVRV1ptYVd4cFlYUnBiMjRpT2lJaUxDSm9aaTVGYm5KdmJHeHRaVzUwU1VRaU9pSnZjbVJsY21WeU1TNXoKZFhCd2JIbGphR0ZwYmkxdVpYUWlMQ0pvWmk1VWVYQmxJam9pYjNKa1pYSmxjaUo5ZlRBS0JnZ3Foa2pPUFFRRApBZ05JQURCRkFpRUFndzYxNmJveURDVDFyaEtObU9JYUcxVkFlSkE4Q1Z1WnRWT2R3bFpncjJzQ0lCcXR0WnNFCnlTRElJMVRCZUtnVEVuK2RncmM3cXVlTlEwSnIyVHR0NXN0UQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tChISCgU1MDBtcxAKGAEgBSiAgIAKGgZBZG1pbnMiKgoPQmxvY2tWYWxpZGF0aW9uEhcSDQgDEgkKB1dyaXRlcnMaBkFkbWlucyIiCgdSZWFkZXJzEhcSDQgDEgkKB1JlYWRlcnMaBkFkbWlucyIiCgdXcml0ZXJzEhcSDQgDEgkKB1dyaXRlcnMaBkFkbWlucyIiCgZBZG1pbnMSGBIOCAMSCgoGQWRtaW5zEAIaBkFkbWlucyoGQWRtaW5zEte6AQoLQ29uc29ydGl1bXMSxroBEvq5AQoVU3VwcGx5Q2hhaW5Db25zb3J0aXVtEt+5ARKoLwoPbWFudWZhY3R1cmVyTVNQEpQvGpwtCgNNU1ASlC0SiS0Shi0KD21hbnVmYWN0dXJlck1TUBL1BS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDQVRDQ0FhZWdBd0lCQWdJSkFOdU1iZkF1SU1tQ01Bb0dDQ3FHU000OUJBTUNNR1F4Q3pBSkJnTlZCQVlUCkFrTklNUTh3RFFZRFZRUUlEQVphZFhKcFkyZ3hEekFOQmdOVkJBY01CbHAxY21samFERVZNQk1HQTFVRUNnd00KVFdGdWRXWmhZM1IxY21WeU1Sd3dHZ1lEVlFRRERCTmpZUzV0WVc1MVptRmpkSFZ5WlhJdGJtVjBNQjRYRFRJeApNVEV4T0RBMU1UZ3lObG9YRFRJME1Ea3dOekExTVRneU5sb3daREVMTUFrR0ExVUVCaE1DUTBneER6QU5CZ05WCkJBZ01CbHAxY21samFERVBNQTBHQTFVRUJ3d0dXblZ5YVdOb01SVXdFd1lEVlFRS0RBeE5ZVzUxWm1GamRIVnkKWlhJeEhEQWFCZ05WQkFNTUUyTmhMbTFoYm5WbVlXTjBkWEpsY2kxdVpYUXdXVEFUQmdjcWhrak9QUUlCQmdncQpoa2pPUFFNQkJ3TkNBQVR0L2NXYkZ4UElUYStPWGMvUnNzRnI0VFYyZ3VYQmJ0ZVQrQmdkMHNFWlhRRUFIOHZ5CmwrdUFqekFNVzJCL3lIS1NocHpVLzlzT1hSM09ZQ25xNFpZZG8wSXdRREFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUE0R0ExVWREd0VCL3dRRUF3SUJwakFkQmdOVkhRNEVGZ1FVSExHQ3dxTzh2ZFFnOWNrTEtQMHVOM1plZkR3dwpDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBTkhrYW5JZzN4S3MyRXBHQzVwUmw3clJCSElTc3M0enRHK1lEZy9WClZ5NUpBaUFWNWZlZkdtUWdXNUVlbVFvNFVvVzM5NGpCN0FlL0dubUk5L1RhalBVWXJ3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoi4wgtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJREVEQ0NBcmVnQXdJQkFnSVVEa29mdk5nYnRHeFNtWE44cmpJWE1Gd2JIeTB3Q2dZSUtvWkl6ajBFQXdJdwpaREVMTUFrR0ExVUVCaE1DUTBneER6QU5CZ05WQkFnTUJscDFjbWxqYURFUE1BMEdBMVVFQnd3R1duVnlhV05vCk1SVXdFd1lEVlFRS0RBeE5ZVzUxWm1GamRIVnlaWEl4SERBYUJnTlZCQU1NRTJOaExtMWhiblZtWVdOMGRYSmwKY2kxdVpYUXdIaGNOTWpFeE1URTRNRFV5TWpBd1doY05Nakl4TVRFNE1EVXlOekF3V2pDQmhqRUxNQWtHQTFVRQpCaE1DUTBneEdqQVlCZ05WQkFjVEVUUTNMak00THpndU5UUXZXblZ5YVdOb01SVXdFd1lEVlFRS0V3eE5ZVzUxClptRmpkSFZ5WlhJeEl6QU1CZ05WQkFzVEJXRmtiV2x1TUJNR0ExVUVDeE1NYldGdWRXWmhZM1IxY21WeU1SOHcKSFFZRFZRUUREQlpCWkcxcGJrQnRZVzUxWm1GamRIVnlaWEl0Ym1WME1Ga3dFd1lIS29aSXpqMENBUVlJS29aSQp6ajBEQVFjRFFnQUVMS0NmM2ZoeVFOb3pZUHJtUXhLOS81SmkwckhhZDhPZVJMK0RsUG42RGVkNTd3cTcxckZNClhDdGNCNWIzeUpKZjJpVVA1OEhGVXQ4dzRTUENiSFZQcktPQ0FTSXdnZ0VlTUE0R0ExVWREd0VCL3dRRUF3SUgKZ0RBTUJnTlZIUk1CQWY4RUFqQUFNQjBHQTFVZERnUVdCQlRuV1NKeEFiYUhoRVpXSWRyRXI5YmJZakE1UkRBZgpCZ05WSFNNRUdEQVdnQlFjc1lMQ283eTkxQ0QxeVFzby9TNDNkbDU4UERBa0JnTlZIUkVFSFRBYmdobGpZUzEwCmIyOXNjeTAzT0RkaU5HWTVabU5rTFdodGJHSnhNSUdYQmdncUF3UUZCZ2NJQVFTQmluc2lZWFIwY25NaU9uc2kKWVdKaFl5NXBibWwwSWpvaWRISjFaU0lzSW1Ga2JXbHVJam9pZEhKMVpTSXNJbWhtTGtGbVptbHNhV0YwYVc5dQpJam9pYldGdWRXWmhZM1IxY21WeUlpd2lhR1l1Ulc1eWIyeHNiV1Z1ZEVsRUlqb2lRV1J0YVc1QWJXRnVkV1poClkzUjFjbVZ5TFc1bGRDSXNJbWhtTGxSNWNHVWlPaUpoWkcxcGJpSjlmVEFLQmdncWhrak9QUVFEQWdOSEFEQkUKQWlCTHBHUlgyTURESm4zRWhTcEtjZVJFWG5CcmcxN1RobW1CK09vYUhsSmVyQUlnRFh1dlNEdjJLd2JvbEZSWApEclhoOXl3dFhFcVJlNWtCcCsrNCt4MkJFOXc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KQg4KBFNIQTISBlNIQTI1Nkr1BS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDQVRDQ0FhZWdBd0lCQWdJSkFOdU1iZkF1SU1tQ01Bb0dDQ3FHU000OUJBTUNNR1F4Q3pBSkJnTlZCQVlUCkFrTklNUTh3RFFZRFZRUUlEQVphZFhKcFkyZ3hEekFOQmdOVkJBY01CbHAxY21samFERVZNQk1HQTFVRUNnd00KVFdGdWRXWmhZM1IxY21WeU1Sd3dHZ1lEVlFRRERCTmpZUzV0WVc1MVptRmpkSFZ5WlhJdGJtVjBNQjRYRFRJeApNVEV4T0RBMU1UZ3lObG9YRFRJME1Ea3dOekExTVRneU5sb3daREVMTUFrR0ExVUVCaE1DUTBneER6QU5CZ05WCkJBZ01CbHAxY21samFERVBNQTBHQTFVRUJ3d0dXblZ5YVdOb01SVXdFd1lEVlFRS0RBeE5ZVzUxWm1GamRIVnkKWlhJeEhEQWFCZ05WQkFNTUUyTmhMbTFoYm5WbVlXTjBkWEpsY2kxdVpYUXdXVEFUQmdjcWhrak9QUUlCQmdncQpoa2pPUFFNQkJ3TkNBQVR0L2NXYkZ4UElUYStPWGMvUnNzRnI0VFYyZ3VYQmJ0ZVQrQmdkMHNFWlhRRUFIOHZ5CmwrdUFqekFNVzJCL3lIS1NocHpVLzlzT1hSM09ZQ25xNFpZZG8wSXdRREFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUE0R0ExVWREd0VCL3dRRUF3SUJwakFkQmdOVkhRNEVGZ1FVSExHQ3dxTzh2ZFFnOWNrTEtQMHVOM1plZkR3dwpDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBTkhrYW5JZzN4S3MyRXBHQzVwUmw3clJCSElTc3M0enRHK1lEZy9WClZ5NUpBaUFWNWZlZkdtUWdXNUVlbVFvNFVvVzM5NGpCN0FlL0dubUk5L1RhalBVWXJ3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQpajBgIARKABgr1BS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDQVRDQ0FhZWdBd0lCQWdJSkFOdU1iZkF1SU1tQ01Bb0dDQ3FHU000OUJBTUNNR1F4Q3pBSkJnTlZCQVlUCkFrTklNUTh3RFFZRFZRUUlEQVphZFhKcFkyZ3hEekFOQmdOVkJBY01CbHAxY21samFERVZNQk1HQTFVRUNnd00KVFdGdWRXWmhZM1IxY21WeU1Sd3dHZ1lEVlFRRERCTmpZUzV0WVc1MVptRmpkSFZ5WlhJdGJtVjBNQjRYRFRJeApNVEV4T0RBMU1UZ3lObG9YRFRJME1Ea3dOekExTVRneU5sb3daREVMTUFrR0ExVUVCaE1DUTBneER6QU5CZ05WCkJBZ01CbHAxY21samFERVBNQTBHQTFVRUJ3d0dXblZ5YVdOb01SVXdFd1lEVlFRS0RBeE5ZVzUxWm1GamRIVnkKWlhJeEhEQWFCZ05WQkFNTUUyTmhMbTFoYm5WbVlXTjBkWEpsY2kxdVpYUXdXVEFUQmdjcWhrak9QUUlCQmdncQpoa2pPUFFNQkJ3TkNBQVR0L2NXYkZ4UElUYStPWGMvUnNzRnI0VFYyZ3VYQmJ0ZVQrQmdkMHNFWlhRRUFIOHZ5CmwrdUFqekFNVzJCL3lIS1NocHpVLzlzT1hSM09ZQ25xNFpZZG8wSXdRREFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUE0R0ExVWREd0VCL3dRRUF3SUJwakFkQmdOVkhRNEVGZ1FVSExHQ3dxTzh2ZFFnOWNrTEtQMHVOM1plZkR3dwpDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBTkhrYW5JZzN4S3MyRXBHQzVwUmw3clJCSElTc3M0enRHK1lEZy9WClZ5NUpBaUFWNWZlZkdtUWdXNUVlbVFvNFVvVzM5NGpCN0FlL0dubUk5L1RhalBVWXJ3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSBmNsaWVudBr+BQr1BS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDQVRDQ0FhZWdBd0lCQWdJSkFOdU1iZkF1SU1tQ01Bb0dDQ3FHU000OUJBTUNNR1F4Q3pBSkJnTlZCQVlUCkFrTklNUTh3RFFZRFZRUUlEQVphZFhKcFkyZ3hEekFOQmdOVkJBY01CbHAxY21samFERVZNQk1HQTFVRUNnd00KVFdGdWRXWmhZM1IxY21WeU1Sd3dHZ1lEVlFRRERCTmpZUzV0WVc1MVptRmpkSFZ5WlhJdGJtVjBNQjRYRFRJeApNVEV4T0RBMU1UZ3lObG9YRFRJME1Ea3dOekExTVRneU5sb3daREVMTUFrR0ExVUVCaE1DUTBneER6QU5CZ05WCkJBZ01CbHAxY21samFERVBNQTBHQTFVRUJ3d0dXblZ5YVdOb01SVXdFd1lEVlFRS0RBeE5ZVzUxWm1GamRIVnkKWlhJeEhEQWFCZ05WQkFNTUUyTmhMbTFoYm5WbVlXTjBkWEpsY2kxdVpYUXdXVEFUQmdjcWhrak9QUUlCQmdncQpoa2pPUFFNQkJ3TkNBQVR0L2NXYkZ4UElUYStPWGMvUnNzRnI0VFYyZ3VYQmJ0ZVQrQmdkMHNFWlhRRUFIOHZ5CmwrdUFqekFNVzJCL3lIS1NocHpVLzlzT1hSM09ZQ25xNFpZZG8wSXdRREFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUE0R0ExVWREd0VCL3dRRUF3SUJwakFkQmdOVkhRNEVGZ1FVSExHQ3dxTzh2ZFFnOWNrTEtQMHVOM1plZkR3dwpDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBTkhrYW5JZzN4S3MyRXBHQzVwUmw3clJCSElTc3M0enRHK1lEZy9WClZ5NUpBaUFWNWZlZkdtUWdXNUVlbVFvNFVvVzM5NGpCN0FlL0dubUk5L1RhalBVWXJ3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSBHBlZXIi/wUK9QUtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ0FUQ0NBYWVnQXdJQkFnSUpBTnVNYmZBdUlNbUNNQW9HQ0NxR1NNNDlCQU1DTUdReEN6QUpCZ05WQkFZVApBa05JTVE4d0RRWURWUVFJREFaYWRYSnBZMmd4RHpBTkJnTlZCQWNNQmxwMWNtbGphREVWTUJNR0ExVUVDZ3dNClRXRnVkV1poWTNSMWNtVnlNUnd3R2dZRFZRUUREQk5qWVM1dFlXNTFabUZqZEhWeVpYSXRibVYwTUI0WERUSXgKTVRFeE9EQTFNVGd5TmxvWERUSTBNRGt3TnpBMU1UZ3lObG93WkRFTE1Ba0dBMVVFQmhNQ1EwZ3hEekFOQmdOVgpCQWdNQmxwMWNtbGphREVQTUEwR0ExVUVCd3dHV25WeWFXTm9NUlV3RXdZRFZRUUtEQXhOWVc1MVptRmpkSFZ5ClpYSXhIREFhQmdOVkJBTU1FMk5oTG0xaGJuVm1ZV04wZFhKbGNpMXVaWFF3V1RBVEJnY3Foa2pPUFFJQkJnZ3EKaGtqT1BRTUJCd05DQUFUdC9jV2JGeFBJVGErT1hjL1Jzc0ZyNFRWMmd1WEJidGVUK0JnZDBzRVpYUUVBSDh2eQpsK3VBanpBTVcyQi95SEtTaHB6VS85c09YUjNPWUNucTRaWWRvMEl3UURBUEJnTlZIUk1CQWY4RUJUQURBUUgvCk1BNEdBMVVkRHdFQi93UUVBd0lCcGpBZEJnTlZIUTRFRmdRVUhMR0N3cU84dmRRZzlja0xLUDB1TjNaZWZEd3cKQ2dZSUtvWkl6ajBFQXdJRFNBQXdSUUloQU5Ia2FuSWczeEtzMkVwR0M1cFJsN3JSQkhJU3NzNHp0RytZRGcvVgpWeTVKQWlBVjVmZWZHbVFnVzVFZW1RbzRVb1czOTRqQjdBZS9Hbm1JOS9UYWpQVVlydz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KEgVhZG1pbiqBBgr1BS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDQVRDQ0FhZWdBd0lCQWdJSkFOdU1iZkF1SU1tQ01Bb0dDQ3FHU000OUJBTUNNR1F4Q3pBSkJnTlZCQVlUCkFrTklNUTh3RFFZRFZRUUlEQVphZFhKcFkyZ3hEekFOQmdOVkJBY01CbHAxY21samFERVZNQk1HQTFVRUNnd00KVFdGdWRXWmhZM1IxY21WeU1Sd3dHZ1lEVlFRRERCTmpZUzV0WVc1MVptRmpkSFZ5WlhJdGJtVjBNQjRYRFRJeApNVEV4T0RBMU1UZ3lObG9YRFRJME1Ea3dOekExTVRneU5sb3daREVMTUFrR0ExVUVCaE1DUTBneER6QU5CZ05WCkJBZ01CbHAxY21samFERVBNQTBHQTFVRUJ3d0dXblZ5YVdOb01SVXdFd1lEVlFRS0RBeE5ZVzUxWm1GamRIVnkKWlhJeEhEQWFCZ05WQkFNTUUyTmhMbTFoYm5WbVlXTjBkWEpsY2kxdVpYUXdXVEFUQmdjcWhrak9QUUlCQmdncQpoa2pPUFFNQkJ3TkNBQVR0L2NXYkZ4UElUYStPWGMvUnNzRnI0VFYyZ3VYQmJ0ZVQrQmdkMHNFWlhRRUFIOHZ5CmwrdUFqekFNVzJCL3lIS1NocHpVLzlzT1hSM09ZQ25xNFpZZG8wSXdRREFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUE0R0ExVWREd0VCL3dRRUF3SUJwakFkQmdOVkhRNEVGZ1FVSExHQ3dxTzh2ZFFnOWNrTEtQMHVOM1plZkR3dwpDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBTkhrYW5JZzN4S3MyRXBHQzVwUmw3clJCSElTc3M0enRHK1lEZy9WClZ5NUpBaUFWNWZlZkdtUWdXNUVlbVFvNFVvVzM5NGpCN0FlL0dubUk5L1RhalBVWXJ3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSB29yZGVyZXIaBkFkbWlucyI5CgZBZG1pbnMSLxIlCAESIRIIEgYIARICCAAaFRITCg9tYW51ZmFjdHVyZXJNU1AQARoGQWRtaW5zIjwKC0VuZG9yc2VtZW50Ei0SIwgBEh8SCBIGCAESAggAGhMSEQoPbWFudWZhY3R1cmVyTVNQGgZBZG1pbnMiOAoHUmVhZGVycxItEiMIARIfEggSBggBEgIIABoTEhEKD21hbnVmYWN0dXJlck1TUBoGQWRtaW5zIjgKB1dyaXRlcnMSLRIjCAESHxIIEgYIARICCAAaExIRCg9tYW51ZmFjdHVyZXJNU1AaBkFkbWlucyoGQWRtaW5zErEtCgpjYXJyaWVyTVNQEqItGr4rCgNNU1AStisSqysSqCsKCmNhcnJpZXJNU1AS2QUtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQjdUQ0NBWk9nQXdJQkFnSUpBUGlmRXo5aXU2eStNQW9HQ0NxR1NNNDlCQU1DTUZveEN6QUpCZ05WQkFZVApBa2RDTVE4d0RRWURWUVFJREFaTWIyNWtiMjR4RHpBTkJnTlZCQWNNQmt4dmJtUnZiakVRTUE0R0ExVUVDZ3dIClEyRnljbWxsY2pFWE1CVUdBMVVFQXd3T1kyRXVZMkZ5Y21sbGNpMXVaWFF3SGhjTk1qRXhNVEU0TURVeE9ETTIKV2hjTk1qUXdPVEEzTURVeE9ETTJXakJhTVFzd0NRWURWUVFHRXdKSFFqRVBNQTBHQTFVRUNBd0dURzl1Wkc5dQpNUTh3RFFZRFZRUUhEQVpNYjI1a2IyNHhFREFPQmdOVkJBb01CME5oY25KcFpYSXhGekFWQmdOVkJBTU1EbU5oCkxtTmhjbkpwWlhJdGJtVjBNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVQU1RPb1o5bEw2Ny8KK1daNERCK3ZieVVhYjgrZVMraFlWNVVLalJERzMySGxwZ20zTGpBN0JKU2FnUzJIMFRhY1NPQ3RHVlp4V1MrZwpCcjR6YXU2QXBLTkNNRUF3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVkhROEJBZjhFQkFNQ0FhWXdIUVlEClZSME9CQllFRk1BYW5OdThLVFFPdTBkSFpqOXhZTlNSWTJpTU1Bb0dDQ3FHU000OUJBTUNBMGdBTUVVQ0lRQ1IKNXhnaUpzNzlHcE9kVk11eFVpb3N5NncrSzZEbWgwRGJNUzNPTDJOWkp3SWdETytQcllmdFJWdWhzYmQ5aVh5TApjcjNQVkRBQ2Fsb2VjVFAyYUJsQThFdz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoisggtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQzdUQ0NBcFNnQXdJQkFnSVVSak5wZ3NBWUlSNEkwUnJ0enhyUlp5ZHBUaUV3Q2dZSUtvWkl6ajBFQXdJdwpXakVMTUFrR0ExVUVCaE1DUjBJeER6QU5CZ05WQkFnTUJreHZibVJ2YmpFUE1BMEdBMVVFQnd3R1RHOXVaRzl1Ck1SQXdEZ1lEVlFRS0RBZERZWEp5YVdWeU1SY3dGUVlEVlFRRERBNWpZUzVqWVhKeWFXVnlMVzVsZERBZUZ3MHkKTVRFeE1UZ3dOVEl5TURCYUZ3MHlNakV4TVRnd05USTNNREJhTUhneEN6QUpCZ05WQkFZVEFrZENNUnN3R1FZRApWUVFIRXhJMU1TNDFNQzh0TUM0eE15OU1iMjVrYjI0eEVEQU9CZ05WQkFvVEIwTmhjbkpwWlhJeEhqQU1CZ05WCkJBc1RCV0ZrYldsdU1BNEdBMVVFQ3hNSFkyRnljbWxsY2pFYU1CZ0dBMVVFQXd3UlFXUnRhVzVBWTJGeWNtbGwKY2kxdVpYUXdXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CQndOQ0FBU3B3Rjc3ZkZLb3FaK08xYk05ZytDOQpmenlRTUVwdFlidXRHMzdVNVdiRFJpbVEycEFNVjRwVkNOemNJZDBpbWRLVW9QWE1qTUtaeFBTVU9oelRCWXNoCm80SUJHRENDQVJRd0RnWURWUjBQQVFIL0JBUURBZ2VBTUF3R0ExVWRFd0VCL3dRQ01BQXdIUVlEVlIwT0JCWUUKRk1rN0t4REZ3elpPZjlvV2I2azluU3NLdEZ6aU1COEdBMVVkSXdRWU1CYUFGTUFhbk51OEtUUU91MGRIWmo5eApZTlNSWTJpTU1DUUdBMVVkRVFRZE1CdUNHV05oTFhSdmIyeHpMVGM0TjJJMFpqbG1ZMlF0T0RWd09YRXdnWTBHCkNDb0RCQVVHQndnQkJJR0FleUpoZEhSeWN5STZleUpoWW1GakxtbHVhWFFpT2lKMGNuVmxJaXdpWVdSdGFXNGkKT2lKMGNuVmxJaXdpYUdZdVFXWm1hV3hwWVhScGIyNGlPaUpqWVhKeWFXVnlJaXdpYUdZdVJXNXliMnhzYldWdQpkRWxFSWpvaVFXUnRhVzVBWTJGeWNtbGxjaTF1WlhRaUxDSm9aaTVVZVhCbElqb2lZV1J0YVc0aWZYMHdDZ1lJCktvWkl6ajBFQXdJRFJ3QXdSQUlnYkJhS3poTjdLNmFsUUxtY3hWK0EwRkJyNkhEeXZBNlJmdGNyaWVIL0EvY0MKSUVESXczeFhiWCtHc0U1aTJLNnF2YjVMSDVZbzdRNGV6K2tRdllIYkxQdUwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQpCDgoEU0hBMhIGU0hBMjU2StkFLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI3VENDQVpPZ0F3SUJBZ0lKQVBpZkV6OWl1NnkrTUFvR0NDcUdTTTQ5QkFNQ01Gb3hDekFKQmdOVkJBWVQKQWtkQ01ROHdEUVlEVlFRSURBWk1iMjVrYjI0eER6QU5CZ05WQkFjTUJreHZibVJ2YmpFUU1BNEdBMVVFQ2d3SApRMkZ5Y21sbGNqRVhNQlVHQTFVRUF3d09ZMkV1WTJGeWNtbGxjaTF1WlhRd0hoY05NakV4TVRFNE1EVXhPRE0yCldoY05NalF3T1RBM01EVXhPRE0yV2pCYU1Rc3dDUVlEVlFRR0V3SkhRakVQTUEwR0ExVUVDQXdHVEc5dVpHOXUKTVE4d0RRWURWUVFIREFaTWIyNWtiMjR4RURBT0JnTlZCQW9NQjBOaGNuSnBaWEl4RnpBVkJnTlZCQU1NRG1OaApMbU5oY25KcFpYSXRibVYwTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFUFNUT29aOWxMNjcvCitXWjREQit2YnlVYWI4K2VTK2hZVjVVS2pSREczMkhscGdtM0xqQTdCSlNhZ1MySDBUYWNTT0N0R1ZaeFdTK2cKQnI0emF1NkFwS05DTUVBd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBT0JnTlZIUThCQWY4RUJBTUNBYVl3SFFZRApWUjBPQkJZRUZNQWFuTnU4S1RRT3UwZEhaajl4WU5TUlkyaU1NQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJUUNSCjV4Z2lKczc5R3BPZFZNdXhVaW9zeTZ3K0s2RG1oMERiTVMzT0wyTlpKd0lnRE8rUHJZZnRSVnVoc2JkOWlYeUwKY3IzUFZEQUNhbG9lY1RQMmFCbEE4RXc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KWpwXCAES5AUK2QUtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQjdUQ0NBWk9nQXdJQkFnSUpBUGlmRXo5aXU2eStNQW9HQ0NxR1NNNDlCQU1DTUZveEN6QUpCZ05WQkFZVApBa2RDTVE4d0RRWURWUVFJREFaTWIyNWtiMjR4RHpBTkJnTlZCQWNNQmt4dmJtUnZiakVRTUE0R0ExVUVDZ3dIClEyRnljbWxsY2pFWE1CVUdBMVVFQXd3T1kyRXVZMkZ5Y21sbGNpMXVaWFF3SGhjTk1qRXhNVEU0TURVeE9ETTIKV2hjTk1qUXdPVEEzTURVeE9ETTJXakJhTVFzd0NRWURWUVFHRXdKSFFqRVBNQTBHQTFVRUNBd0dURzl1Wkc5dQpNUTh3RFFZRFZRUUhEQVpNYjI1a2IyNHhFREFPQmdOVkJBb01CME5oY25KcFpYSXhGekFWQmdOVkJBTU1EbU5oCkxtTmhjbkpwWlhJdGJtVjBNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVQU1RPb1o5bEw2Ny8KK1daNERCK3ZieVVhYjgrZVMraFlWNVVLalJERzMySGxwZ20zTGpBN0JKU2FnUzJIMFRhY1NPQ3RHVlp4V1MrZwpCcjR6YXU2QXBLTkNNRUF3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVkhROEJBZjhFQkFNQ0FhWXdIUVlEClZSME9CQllFRk1BYW5OdThLVFFPdTBkSFpqOXhZTlNSWTJpTU1Bb0dDQ3FHU000OUJBTUNBMGdBTUVVQ0lRQ1IKNXhnaUpzNzlHcE9kVk11eFVpb3N5NncrSzZEbWgwRGJNUzNPTDJOWkp3SWdETytQcllmdFJWdWhzYmQ5aVh5TApjcjNQVkRBQ2Fsb2VjVFAyYUJsQThFdz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSBmNsaWVudBriBQrZBS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlCN1RDQ0FaT2dBd0lCQWdJSkFQaWZFejlpdTZ5K01Bb0dDQ3FHU000OUJBTUNNRm94Q3pBSkJnTlZCQVlUCkFrZENNUTh3RFFZRFZRUUlEQVpNYjI1a2IyNHhEekFOQmdOVkJBY01Ca3h2Ym1SdmJqRVFNQTRHQTFVRUNnd0gKUTJGeWNtbGxjakVYTUJVR0ExVUVBd3dPWTJFdVkyRnljbWxsY2kxdVpYUXdIaGNOTWpFeE1URTRNRFV4T0RNMgpXaGNOTWpRd09UQTNNRFV4T0RNMldqQmFNUXN3Q1FZRFZRUUdFd0pIUWpFUE1BMEdBMVVFQ0F3R1RHOXVaRzl1Ck1ROHdEUVlEVlFRSERBWk1iMjVrYjI0eEVEQU9CZ05WQkFvTUIwTmhjbkpwWlhJeEZ6QVZCZ05WQkFNTURtTmgKTG1OaGNuSnBaWEl0Ym1WME1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRVBTVE9vWjlsTDY3LworV1o0REIrdmJ5VWFiOCtlUytoWVY1VUtqUkRHMzJIbHBnbTNMakE3QkpTYWdTMkgwVGFjU09DdEdWWnhXUytnCkJyNHphdTZBcEtOQ01FQXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQWFZd0hRWUQKVlIwT0JCWUVGTUFhbk51OEtUUU91MGRIWmo5eFlOU1JZMmlNTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSVFDUgo1eGdpSnM3OUdwT2RWTXV4VWlvc3k2dytLNkRtaDBEYk1TM09MMk5aSndJZ0RPK1ByWWZ0UlZ1aHNiZDlpWHlMCmNyM1BWREFDYWxvZWNUUDJhQmxBOEV3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tChIEcGVlciLjBQrZBS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlCN1RDQ0FaT2dBd0lCQWdJSkFQaWZFejlpdTZ5K01Bb0dDQ3FHU000OUJBTUNNRm94Q3pBSkJnTlZCQVlUCkFrZENNUTh3RFFZRFZRUUlEQVpNYjI1a2IyNHhEekFOQmdOVkJBY01Ca3h2Ym1SdmJqRVFNQTRHQTFVRUNnd0gKUTJGeWNtbGxjakVYTUJVR0ExVUVBd3dPWTJFdVkyRnljbWxsY2kxdVpYUXdIaGNOTWpFeE1URTRNRFV4T0RNMgpXaGNOTWpRd09UQTNNRFV4T0RNMldqQmFNUXN3Q1FZRFZRUUdFd0pIUWpFUE1BMEdBMVVFQ0F3R1RHOXVaRzl1Ck1ROHdEUVlEVlFRSERBWk1iMjVrYjI0eEVEQU9CZ05WQkFvTUIwTmhjbkpwWlhJeEZ6QVZCZ05WQkFNTURtTmgKTG1OaGNuSnBaWEl0Ym1WME1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRVBTVE9vWjlsTDY3LworV1o0REIrdmJ5VWFiOCtlUytoWVY1VUtqUkRHMzJIbHBnbTNMakE3QkpTYWdTMkgwVGFjU09DdEdWWnhXUytnCkJyNHphdTZBcEtOQ01FQXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQWFZd0hRWUQKVlIwT0JCWUVGTUFhbk51OEtUUU91MGRIWmo5eFlOU1JZMmlNTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSVFDUgo1eGdpSnM3OUdwT2RWTXV4VWlvc3k2dytLNkRtaDBEYk1TM09MMk5aSndJZ0RPK1ByWWZ0UlZ1aHNiZDlpWHlMCmNyM1BWREFDYWxvZWNUUDJhQmxBOEV3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tChIFYWRtaW4q5QUK2QUtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQjdUQ0NBWk9nQXdJQkFnSUpBUGlmRXo5aXU2eStNQW9HQ0NxR1NNNDlCQU1DTUZveEN6QUpCZ05WQkFZVApBa2RDTVE4d0RRWURWUVFJREFaTWIyNWtiMjR4RHpBTkJnTlZCQWNNQmt4dmJtUnZiakVRTUE0R0ExVUVDZ3dIClEyRnljbWxsY2pFWE1CVUdBMVVFQXd3T1kyRXVZMkZ5Y21sbGNpMXVaWFF3SGhjTk1qRXhNVEU0TURVeE9ETTIKV2hjTk1qUXdPVEEzTURVeE9ETTJXakJhTVFzd0NRWURWUVFHRXdKSFFqRVBNQTBHQTFVRUNBd0dURzl1Wkc5dQpNUTh3RFFZRFZRUUhEQVpNYjI1a2IyNHhFREFPQmdOVkJBb01CME5oY25KcFpYSXhGekFWQmdOVkJBTU1EbU5oCkxtTmhjbkpwWlhJdGJtVjBNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVQU1RPb1o5bEw2Ny8KK1daNERCK3ZieVVhYjgrZVMraFlWNVVLalJERzMySGxwZ20zTGpBN0JKU2FnUzJIMFRhY1NPQ3RHVlp4V1MrZwpCcjR6YXU2QXBLTkNNRUF3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVkhROEJBZjhFQkFNQ0FhWXdIUVlEClZSME9CQllFRk1BYW5OdThLVFFPdTBkSFpqOXhZTlNSWTJpTU1Bb0dDQ3FHU000OUJBTUNBMGdBTUVVQ0lRQ1IKNXhnaUpzNzlHcE9kVk11eFVpb3N5NncrSzZEbWgwRGJNUzNPTDJOWkp3SWdETytQcllmdFJWdWhzYmQ5aVh5TApjcjNQVkRBQ2Fsb2VjVFAyYUJsQThFdz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSB29yZGVyZXIaBkFkbWlucyIzCgdSZWFkZXJzEigSHggBEhoSCBIGCAESAggAGg4SDAoKY2Fycmllck1TUBoGQWRtaW5zIjMKB1dyaXRlcnMSKBIeCAESGhIIEgYIARICCAAaDhIMCgpjYXJyaWVyTVNQGgZBZG1pbnMiNAoGQWRtaW5zEioSIAgBEhwSCBIGCAESAggAGhASDgoKY2Fycmllck1TUBABGgZBZG1pbnMiNwoLRW5kb3JzZW1lbnQSKBIeCAESGhIIEgYIARICCAAaDhIMCgpjYXJyaWVyTVNQGgZBZG1pbnMqBkFkbWlucxKZLQoIc3RvcmVNU1ASjC0asCsKA01TUBKoKxKdKxKaKwoIc3RvcmVNU1AS2QUtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQjdqQ0NBWk9nQXdJQkFnSUpBTU43SUI5QkhlakhNQW9HQ0NxR1NNNDlCQU1DTUZveEN6QUpCZ05WQkFZVApBbFZUTVJFd0R3WURWUVFJREFoT1pYY2dXVzl5YXpFUk1BOEdBMVVFQnd3SVRtVjNJRmx2Y21zeERqQU1CZ05WCkJBb01CVk4wYjNKbE1SVXdFd1lEVlFRRERBeGpZUzV6ZEc5eVpTMXVaWFF3SGhjTk1qRXhNVEU0TURVeE9EUTIKV2hjTk1qUXdPVEEzTURVeE9EUTJXakJhTVFzd0NRWURWUVFHRXdKVlV6RVJNQThHQTFVRUNBd0lUbVYzSUZsdgpjbXN4RVRBUEJnTlZCQWNNQ0U1bGR5QlpiM0pyTVE0d0RBWURWUVFLREFWVGRHOXlaVEVWTUJNR0ExVUVBd3dNClkyRXVjM1J2Y21VdGJtVjBNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVXQ2JWbTc3cDRMWFEKRDV2UVcvaDYzLzhHQnAyOUdnei9Fa2JJWHBDSXJXV2VoYlN2Nm92dDVXUEVrbitHdG9vb0dpMVlRcXp2UmFaKwo3dVc0Ukl3Njg2TkNNRUF3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVkhROEJBZjhFQkFNQ0FhWXdIUVlEClZSME9CQllFRklzYTBRRWVRUGJieGVGbmZlOUc0ZWYvOHJnMk1Bb0dDQ3FHU000OUJBTUNBMGtBTUVZQ0lRQ1YKb3lvOFh5RVhBS3BLYm1CMmlsRlQvRzRiVVpER0pZM2hVdTJpQnJxd29BSWhBSzI5cCtUZUg1ZWN0L3dwUHBVNgpCVHRhQTh3cmczM3dTZVlWZDF5a0xUMTYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoipggtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQzRqQ0NBb21nQXdJQkFnSVVXY3g1U1NrbUVoaFl4RFFtZk9aUWV6RDRsTG93Q2dZSUtvWkl6ajBFQXdJdwpXakVMTUFrR0ExVUVCaE1DVlZNeEVUQVBCZ05WQkFnTUNFNWxkeUJaYjNKck1SRXdEd1lEVlFRSERBaE9aWGNnCldXOXlhekVPTUF3R0ExVUVDZ3dGVTNSdmNtVXhGVEFUQmdOVkJBTU1ER05oTG5OMGIzSmxMVzVsZERBZUZ3MHkKTVRFeE1UZ3dOVEl6TURCYUZ3MHlNakV4TVRnd05USTRNREJhTUhJeEN6QUpCZ05WQkFZVEFsVlRNUnN3R1FZRApWUVFIRXhJME1DNDNNeTh0TnpRdlRtVjNJRmx2Y21zeERqQU1CZ05WQkFvVEJWTjBiM0psTVJ3d0RBWURWUVFMCkV3VmhaRzFwYmpBTUJnTlZCQXNUQlhOMGIzSmxNUmd3RmdZRFZRUUREQTlCWkcxcGJrQnpkRzl5WlMxdVpYUXcKV1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRYUkpKNGtTQ00vSXJTK250cXdsM29vOWVncCtkRwo0amZnakF6dFJaUkd3aTdKQnNibjV0dDFWWHdTeStCL05LRjQvQ1l6NlAzQmZKaDMzVkxEbDhreW80SUJFekNDCkFROHdEZ1lEVlIwUEFRSC9CQVFEQWdlQU1Bd0dBMVVkRXdFQi93UUNNQUF3SFFZRFZSME9CQllFRkhkTXVIMEcKUU5TTEcwNjFZejlyeGhrYXlqckpNQjhHQTFVZEl3UVlNQmFBRklzYTBRRWVRUGJieGVGbmZlOUc0ZWYvOHJnMgpNQ1FHQTFVZEVRUWRNQnVDR1dOaExYUnZiMnh6TFRjNE4ySTBaamxtWTJRdGNYTm5lbXN3Z1lnR0NDb0RCQVVHCkJ3Z0JCSHg3SW1GMGRISnpJanA3SW1GaVlXTXVhVzVwZENJNkluUnlkV1VpTENKaFpHMXBiaUk2SW5SeWRXVWkKTENKb1ppNUJabVpwYkdsaGRHbHZiaUk2SW5OMGIzSmxJaXdpYUdZdVJXNXliMnhzYldWdWRFbEVJam9pUVdSdAphVzVBYzNSdmNtVXRibVYwSWl3aWFHWXVWSGx3WlNJNkltRmtiV2x1SW4xOU1Bb0dDQ3FHU000OUJBTUNBMGNBCk1FUUNJQWprOUhWN1gxNTJlU2I5dkY4c1l5NXBiSHhDcUIyMTF1KzQ3SWduanpqMUFpQTZyaU1SQmpVWW5STTQKZEZHTVRyZ1IrTjNuTEl3SUlQUnBoVVVVRi8wdTZBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQpCDgoEU0hBMhIGU0hBMjU2StkFLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI3akNDQVpPZ0F3SUJBZ0lKQU1ON0lCOUJIZWpITUFvR0NDcUdTTTQ5QkFNQ01Gb3hDekFKQmdOVkJBWVQKQWxWVE1SRXdEd1lEVlFRSURBaE9aWGNnV1c5eWF6RVJNQThHQTFVRUJ3d0lUbVYzSUZsdmNtc3hEakFNQmdOVgpCQW9NQlZOMGIzSmxNUlV3RXdZRFZRUUREQXhqWVM1emRHOXlaUzF1WlhRd0hoY05NakV4TVRFNE1EVXhPRFEyCldoY05NalF3T1RBM01EVXhPRFEyV2pCYU1Rc3dDUVlEVlFRR0V3SlZVekVSTUE4R0ExVUVDQXdJVG1WM0lGbHYKY21zeEVUQVBCZ05WQkFjTUNFNWxkeUJaYjNKck1RNHdEQVlEVlFRS0RBVlRkRzl5WlRFVk1CTUdBMVVFQXd3TQpZMkV1YzNSdmNtVXRibVYwTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFV0NiVm03N3A0TFhRCkQ1dlFXL2g2My84R0JwMjlHZ3ovRWtiSVhwQ0lyV1dlaGJTdjZvdnQ1V1BFa24rR3Rvb29HaTFZUXF6dlJhWisKN3VXNFJJdzY4Nk5DTUVBd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBT0JnTlZIUThCQWY4RUJBTUNBYVl3SFFZRApWUjBPQkJZRUZJc2EwUUVlUVBiYnhlRm5mZTlHNGVmLzhyZzJNQW9HQ0NxR1NNNDlCQU1DQTBrQU1FWUNJUUNWCm95bzhYeUVYQUtwS2JtQjJpbEZUL0c0YlVaREdKWTNoVXUyaUJycXdvQUloQUsyOXArVGVINWVjdC93cFBwVTYKQlR0YUE4d3JnMzN3U2VZVmQxeWtMVDE2Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KWpwXCAES5AUK2QUtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQjdqQ0NBWk9nQXdJQkFnSUpBTU43SUI5QkhlakhNQW9HQ0NxR1NNNDlCQU1DTUZveEN6QUpCZ05WQkFZVApBbFZUTVJFd0R3WURWUVFJREFoT1pYY2dXVzl5YXpFUk1BOEdBMVVFQnd3SVRtVjNJRmx2Y21zeERqQU1CZ05WCkJBb01CVk4wYjNKbE1SVXdFd1lEVlFRRERBeGpZUzV6ZEc5eVpTMXVaWFF3SGhjTk1qRXhNVEU0TURVeE9EUTIKV2hjTk1qUXdPVEEzTURVeE9EUTJXakJhTVFzd0NRWURWUVFHRXdKVlV6RVJNQThHQTFVRUNBd0lUbVYzSUZsdgpjbXN4RVRBUEJnTlZCQWNNQ0U1bGR5QlpiM0pyTVE0d0RBWURWUVFLREFWVGRHOXlaVEVWTUJNR0ExVUVBd3dNClkyRXVjM1J2Y21VdGJtVjBNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVXQ2JWbTc3cDRMWFEKRDV2UVcvaDYzLzhHQnAyOUdnei9Fa2JJWHBDSXJXV2VoYlN2Nm92dDVXUEVrbitHdG9vb0dpMVlRcXp2UmFaKwo3dVc0Ukl3Njg2TkNNRUF3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVkhROEJBZjhFQkFNQ0FhWXdIUVlEClZSME9CQllFRklzYTBRRWVRUGJieGVGbmZlOUc0ZWYvOHJnMk1Bb0dDQ3FHU000OUJBTUNBMGtBTUVZQ0lRQ1YKb3lvOFh5RVhBS3BLYm1CMmlsRlQvRzRiVVpER0pZM2hVdTJpQnJxd29BSWhBSzI5cCtUZUg1ZWN0L3dwUHBVNgpCVHRhQTh3cmczM3dTZVlWZDF5a0xUMTYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSBmNsaWVudBriBQrZBS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlCN2pDQ0FaT2dBd0lCQWdJSkFNTjdJQjlCSGVqSE1Bb0dDQ3FHU000OUJBTUNNRm94Q3pBSkJnTlZCQVlUCkFsVlRNUkV3RHdZRFZRUUlEQWhPWlhjZ1dXOXlhekVSTUE4R0ExVUVCd3dJVG1WM0lGbHZjbXN4RGpBTUJnTlYKQkFvTUJWTjBiM0psTVJVd0V3WURWUVFEREF4allTNXpkRzl5WlMxdVpYUXdIaGNOTWpFeE1URTRNRFV4T0RRMgpXaGNOTWpRd09UQTNNRFV4T0RRMldqQmFNUXN3Q1FZRFZRUUdFd0pWVXpFUk1BOEdBMVVFQ0F3SVRtVjNJRmx2CmNtc3hFVEFQQmdOVkJBY01DRTVsZHlCWmIzSnJNUTR3REFZRFZRUUtEQVZUZEc5eVpURVZNQk1HQTFVRUF3d00KWTJFdWMzUnZjbVV0Ym1WME1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRVdDYlZtNzdwNExYUQpENXZRVy9oNjMvOEdCcDI5R2d6L0VrYklYcENJcldXZWhiU3Y2b3Z0NVdQRWtuK0d0b29vR2kxWVFxenZSYVorCjd1VzRSSXc2ODZOQ01FQXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQWFZd0hRWUQKVlIwT0JCWUVGSXNhMFFFZVFQYmJ4ZUZuZmU5RzRlZi84cmcyTUFvR0NDcUdTTTQ5QkFNQ0Ewa0FNRVlDSVFDVgpveW84WHlFWEFLcEtibUIyaWxGVC9HNGJVWkRHSlkzaFV1MmlCcnF3b0FJaEFLMjlwK1RlSDVlY3Qvd3BQcFU2CkJUdGFBOHdyZzMzd1NlWVZkMXlrTFQxNgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tChIEcGVlciLjBQrZBS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlCN2pDQ0FaT2dBd0lCQWdJSkFNTjdJQjlCSGVqSE1Bb0dDQ3FHU000OUJBTUNNRm94Q3pBSkJnTlZCQVlUCkFsVlRNUkV3RHdZRFZRUUlEQWhPWlhjZ1dXOXlhekVSTUE4R0ExVUVCd3dJVG1WM0lGbHZjbXN4RGpBTUJnTlYKQkFvTUJWTjBiM0psTVJVd0V3WURWUVFEREF4allTNXpkRzl5WlMxdVpYUXdIaGNOTWpFeE1URTRNRFV4T0RRMgpXaGNOTWpRd09UQTNNRFV4T0RRMldqQmFNUXN3Q1FZRFZRUUdFd0pWVXpFUk1BOEdBMVVFQ0F3SVRtVjNJRmx2CmNtc3hFVEFQQmdOVkJBY01DRTVsZHlCWmIzSnJNUTR3REFZRFZRUUtEQVZUZEc5eVpURVZNQk1HQTFVRUF3d00KWTJFdWMzUnZjbVV0Ym1WME1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRVdDYlZtNzdwNExYUQpENXZRVy9oNjMvOEdCcDI5R2d6L0VrYklYcENJcldXZWhiU3Y2b3Z0NVdQRWtuK0d0b29vR2kxWVFxenZSYVorCjd1VzRSSXc2ODZOQ01FQXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQWFZd0hRWUQKVlIwT0JCWUVGSXNhMFFFZVFQYmJ4ZUZuZmU5RzRlZi84cmcyTUFvR0NDcUdTTTQ5QkFNQ0Ewa0FNRVlDSVFDVgpveW84WHlFWEFLcEtibUIyaWxGVC9HNGJVWkRHSlkzaFV1MmlCcnF3b0FJaEFLMjlwK1RlSDVlY3Qvd3BQcFU2CkJUdGFBOHdyZzMzd1NlWVZkMXlrTFQxNgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tChIFYWRtaW4q5QUK2QUtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQjdqQ0NBWk9nQXdJQkFnSUpBTU43SUI5QkhlakhNQW9HQ0NxR1NNNDlCQU1DTUZveEN6QUpCZ05WQkFZVApBbFZUTVJFd0R3WURWUVFJREFoT1pYY2dXVzl5YXpFUk1BOEdBMVVFQnd3SVRtVjNJRmx2Y21zeERqQU1CZ05WCkJBb01CVk4wYjNKbE1SVXdFd1lEVlFRRERBeGpZUzV6ZEc5eVpTMXVaWFF3SGhjTk1qRXhNVEU0TURVeE9EUTIKV2hjTk1qUXdPVEEzTURVeE9EUTJXakJhTVFzd0NRWURWUVFHRXdKVlV6RVJNQThHQTFVRUNBd0lUbVYzSUZsdgpjbXN4RVRBUEJnTlZCQWNNQ0U1bGR5QlpiM0pyTVE0d0RBWURWUVFLREFWVGRHOXlaVEVWTUJNR0ExVUVBd3dNClkyRXVjM1J2Y21VdGJtVjBNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVXQ2JWbTc3cDRMWFEKRDV2UVcvaDYzLzhHQnAyOUdnei9Fa2JJWHBDSXJXV2VoYlN2Nm92dDVXUEVrbitHdG9vb0dpMVlRcXp2UmFaKwo3dVc0Ukl3Njg2TkNNRUF3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVkhROEJBZjhFQkFNQ0FhWXdIUVlEClZSME9CQllFRklzYTBRRWVRUGJieGVGbmZlOUc0ZWYvOHJnMk1Bb0dDQ3FHU000OUJBTUNBMGtBTUVZQ0lRQ1YKb3lvOFh5RVhBS3BLYm1CMmlsRlQvRzRiVVpER0pZM2hVdTJpQnJxd29BSWhBSzI5cCtUZUg1ZWN0L3dwUHBVNgpCVHRhQTh3cmczM3dTZVlWZDF5a0xUMTYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSB29yZGVyZXIaBkFkbWlucyIxCgdSZWFkZXJzEiYSHAgBEhgSCBIGCAESAggAGgwSCgoIc3RvcmVNU1AaBkFkbWlucyIxCgdXcml0ZXJzEiYSHAgBEhgSCBIGCAESAggAGgwSCgoIc3RvcmVNU1AaBkFkbWlucyIyCgZBZG1pbnMSKBIeCAESGhIIEgYIARICCAAaDhIMCghzdG9yZU1TUBABGgZBZG1pbnMiNQoLRW5kb3JzZW1lbnQSJhIcCAESGBIIEgYIARICCAAaDBIKCghzdG9yZU1TUBoGQWRtaW5zKgZBZG1pbnMShi8KDHdhcmVob3VzZU1TUBL1LhqJLQoDTVNQEoEtEvYsEvMsCgx3YXJlaG91c2VNU1AS9QUtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ0F6Q0NBYW1nQXdJQkFnSUpBSXUyQjdqazNFSlRNQW9HQ0NxR1NNNDlCQU1DTUdVeEN6QUpCZ05WQkFZVApBbFZUTVJZd0ZBWURWUVFJREExTllYTnpZV05vZFhObGRIUnpNUTh3RFFZRFZRUUhEQVpDYjNOMGIyNHhFakFRCkJnTlZCQW9NQ1ZkaGNtVm9iM1Z6WlRFWk1CY0dBMVVFQXd3UVkyRXVkMkZ5WldodmRYTmxMVzVsZERBZUZ3MHkKTVRFeE1UZ3dOVEU0TlRkYUZ3MHlOREE1TURjd05URTROVGRhTUdVeEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRApWUVFJREExTllYTnpZV05vZFhObGRIUnpNUTh3RFFZRFZRUUhEQVpDYjNOMGIyNHhFakFRQmdOVkJBb01DVmRoCmNtVm9iM1Z6WlRFWk1CY0dBMVVFQXd3UVkyRXVkMkZ5WldodmRYTmxMVzVsZERCWk1CTUdCeXFHU000OUFnRUcKQ0NxR1NNNDlBd0VIQTBJQUJDZC9uelk4K2tHMnF4OEY1ckkyNGh0eE8yTnBYdTdQbVFTbWVDbE1abXhJTExkRApaNWxtVjZwdGdJRFVNUFlLYkR4VzQ3YlVyOWc5d29xV0xXUXpXeE9qUWpCQU1BOEdBMVVkRXdFQi93UUZNQU1CCkFmOHdEZ1lEVlIwUEFRSC9CQVFEQWdHbU1CMEdBMVVkRGdRV0JCVDhHcDFMZzlGc1NTa0xDY2NqWFNpb0ZtY2IKcHpBS0JnZ3Foa2pPUFFRREFnTklBREJGQWlFQWc5UDVKOG9SMHNPSHNvQWFxNS82UzhsWjhsZzNmVkE1V29PdwppWDFBZjRJQ0lFVDNsT2x6RzZWcWI1cVowODFKYUR4cG5WSHpvV21MVXIwSU1UcUFuaVdKCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KItMILS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCRENDQXFxZ0F3SUJBZ0lVUllzYi9QVVFZeWtBQmJWeWRGdEhoUi95TmxJd0NnWUlLb1pJemowRUF3SXcKWlRFTE1Ba0dBMVVFQmhNQ1ZWTXhGakFVQmdOVkJBZ01EVTFoYzNOaFkyaDFjMlYwZEhNeER6QU5CZ05WQkFjTQpCa0p2YzNSdmJqRVNNQkFHQTFVRUNnd0pWMkZ5WldodmRYTmxNUmt3RndZRFZRUUREQkJqWVM1M1lYSmxhRzkxCmMyVXRibVYwTUI0WERUSXhNVEV4T0RBMU1qTXdNRm9YRFRJeU1URXhPREExTWpnd01Gb3dmekVMTUFrR0ExVUUKQmhNQ1ZWTXhIREFhQmdOVkJBY1RFelF5TGpNMkx5MDNNUzR3Tmk5Q2IzTjBiMjR4RWpBUUJnTlZCQW9UQ1ZkaApjbVZvYjNWelpURWdNQXdHQTFVRUN4TUZZV1J0YVc0d0VBWURWUVFMRXdsM1lYSmxhRzkxYzJVeEhEQWFCZ05WCkJBTU1FMEZrYldsdVFIZGhjbVZvYjNWelpTMXVaWFF3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkMKQUFTUDJEMU5UUjJSQ0dwVlJrK2pLQ21RQVJkUnptRDdOdXg3c1N0MHJOWk5TaUJEQndCeUk0Slk3NjVNd09zUwoycDB3anUrQVZoTmtTN3BFWXU2K3hlQVFvNElCSERDQ0FSZ3dEZ1lEVlIwUEFRSC9CQVFEQWdlQU1Bd0dBMVVkCkV3RUIvd1FDTUFBd0hRWURWUjBPQkJZRUZFcG85Mk42cWFNb2FjeDNod3YrOHZ4RWV4N1ZNQjhHQTFVZEl3UVkKTUJhQUZQd2FuVXVEMFd4SktRc0p4eU5kS0tnV1p4dW5NQ1FHQTFVZEVRUWRNQnVDR1dOaExYUnZiMnh6TFRjNApOMkkwWmpsbVkyUXRjVGRtWkhJd2daRUdDQ29EQkFVR0J3Z0JCSUdFZXlKaGRIUnljeUk2ZXlKaFltRmpMbWx1CmFYUWlPaUowY25WbElpd2lZV1J0YVc0aU9pSjBjblZsSWl3aWFHWXVRV1ptYVd4cFlYUnBiMjRpT2lKM1lYSmwKYUc5MWMyVWlMQ0pvWmk1RmJuSnZiR3h0Wlc1MFNVUWlPaUpCWkcxcGJrQjNZWEpsYUc5MWMyVXRibVYwSWl3aQphR1l1Vkhsd1pTSTZJbUZrYldsdUluMTlNQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJUUNYZ2pXOWd1enVyVTJqCk9OcGdwSldadUJLRncycGYvRW1QdDBHV29tdHliUUlnSjJob0ZkZzJHYURWS2xwWWhNYkFrOWZLTFc4ZXZxdHQKcHZ4YlJkdUtNdkU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KQg4KBFNIQTISBlNIQTI1Nkr1BS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDQXpDQ0FhbWdBd0lCQWdJSkFJdTJCN2prM0VKVE1Bb0dDQ3FHU000OUJBTUNNR1V4Q3pBSkJnTlZCQVlUCkFsVlRNUll3RkFZRFZRUUlEQTFOWVhOellXTm9kWE5sZEhSek1ROHdEUVlEVlFRSERBWkNiM04wYjI0eEVqQVEKQmdOVkJBb01DVmRoY21Wb2IzVnpaVEVaTUJjR0ExVUVBd3dRWTJFdWQyRnlaV2h2ZFhObExXNWxkREFlRncweQpNVEV4TVRnd05URTROVGRhRncweU5EQTVNRGN3TlRFNE5UZGFNR1V4Q3pBSkJnTlZCQVlUQWxWVE1SWXdGQVlEClZRUUlEQTFOWVhOellXTm9kWE5sZEhSek1ROHdEUVlEVlFRSERBWkNiM04wYjI0eEVqQVFCZ05WQkFvTUNWZGgKY21Wb2IzVnpaVEVaTUJjR0ExVUVBd3dRWTJFdWQyRnlaV2h2ZFhObExXNWxkREJaTUJNR0J5cUdTTTQ5QWdFRwpDQ3FHU000OUF3RUhBMElBQkNkL256WTgra0cycXg4RjVySTI0aHR4TzJOcFh1N1BtUVNtZUNsTVpteElMTGREClo1bG1WNnB0Z0lEVU1QWUtiRHhXNDdiVXI5Zzl3b3FXTFdReld4T2pRakJBTUE4R0ExVWRFd0VCL3dRRk1BTUIKQWY4d0RnWURWUjBQQVFIL0JBUURBZ0dtTUIwR0ExVWREZ1FXQkJUOEdwMUxnOUZzU1NrTENjY2pYU2lvRm1jYgpwekFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBZzlQNUo4b1Iwc09Ic29BYXE1LzZTOGxaOGxnM2ZWQTVXb093CmlYMUFmNElDSUVUM2xPbHpHNlZxYjVxWjA4MUphRHhwblZIem9XbUxVcjBJTVRxQW5pV0oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQpajBgIARKABgr1BS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDQXpDQ0FhbWdBd0lCQWdJSkFJdTJCN2prM0VKVE1Bb0dDQ3FHU000OUJBTUNNR1V4Q3pBSkJnTlZCQVlUCkFsVlRNUll3RkFZRFZRUUlEQTFOWVhOellXTm9kWE5sZEhSek1ROHdEUVlEVlFRSERBWkNiM04wYjI0eEVqQVEKQmdOVkJBb01DVmRoY21Wb2IzVnpaVEVaTUJjR0ExVUVBd3dRWTJFdWQyRnlaV2h2ZFhObExXNWxkREFlRncweQpNVEV4TVRnd05URTROVGRhRncweU5EQTVNRGN3TlRFNE5UZGFNR1V4Q3pBSkJnTlZCQVlUQWxWVE1SWXdGQVlEClZRUUlEQTFOWVhOellXTm9kWE5sZEhSek1ROHdEUVlEVlFRSERBWkNiM04wYjI0eEVqQVFCZ05WQkFvTUNWZGgKY21Wb2IzVnpaVEVaTUJjR0ExVUVBd3dRWTJFdWQyRnlaV2h2ZFhObExXNWxkREJaTUJNR0J5cUdTTTQ5QWdFRwpDQ3FHU000OUF3RUhBMElBQkNkL256WTgra0cycXg4RjVySTI0aHR4TzJOcFh1N1BtUVNtZUNsTVpteElMTGREClo1bG1WNnB0Z0lEVU1QWUtiRHhXNDdiVXI5Zzl3b3FXTFdReld4T2pRakJBTUE4R0ExVWRFd0VCL3dRRk1BTUIKQWY4d0RnWURWUjBQQVFIL0JBUURBZ0dtTUIwR0ExVWREZ1FXQkJUOEdwMUxnOUZzU1NrTENjY2pYU2lvRm1jYgpwekFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBZzlQNUo4b1Iwc09Ic29BYXE1LzZTOGxaOGxnM2ZWQTVXb093CmlYMUFmNElDSUVUM2xPbHpHNlZxYjVxWjA4MUphRHhwblZIem9XbUxVcjBJTVRxQW5pV0oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSBmNsaWVudBr+BQr1BS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDQXpDQ0FhbWdBd0lCQWdJSkFJdTJCN2prM0VKVE1Bb0dDQ3FHU000OUJBTUNNR1V4Q3pBSkJnTlZCQVlUCkFsVlRNUll3RkFZRFZRUUlEQTFOWVhOellXTm9kWE5sZEhSek1ROHdEUVlEVlFRSERBWkNiM04wYjI0eEVqQVEKQmdOVkJBb01DVmRoY21Wb2IzVnpaVEVaTUJjR0ExVUVBd3dRWTJFdWQyRnlaV2h2ZFhObExXNWxkREFlRncweQpNVEV4TVRnd05URTROVGRhRncweU5EQTVNRGN3TlRFNE5UZGFNR1V4Q3pBSkJnTlZCQVlUQWxWVE1SWXdGQVlEClZRUUlEQTFOWVhOellXTm9kWE5sZEhSek1ROHdEUVlEVlFRSERBWkNiM04wYjI0eEVqQVFCZ05WQkFvTUNWZGgKY21Wb2IzVnpaVEVaTUJjR0ExVUVBd3dRWTJFdWQyRnlaV2h2ZFhObExXNWxkREJaTUJNR0J5cUdTTTQ5QWdFRwpDQ3FHU000OUF3RUhBMElBQkNkL256WTgra0cycXg4RjVySTI0aHR4TzJOcFh1N1BtUVNtZUNsTVpteElMTGREClo1bG1WNnB0Z0lEVU1QWUtiRHhXNDdiVXI5Zzl3b3FXTFdReld4T2pRakJBTUE4R0ExVWRFd0VCL3dRRk1BTUIKQWY4d0RnWURWUjBQQVFIL0JBUURBZ0dtTUIwR0ExVWREZ1FXQkJUOEdwMUxnOUZzU1NrTENjY2pYU2lvRm1jYgpwekFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBZzlQNUo4b1Iwc09Ic29BYXE1LzZTOGxaOGxnM2ZWQTVXb093CmlYMUFmNElDSUVUM2xPbHpHNlZxYjVxWjA4MUphRHhwblZIem9XbUxVcjBJTVRxQW5pV0oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSBHBlZXIi/wUK9QUtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ0F6Q0NBYW1nQXdJQkFnSUpBSXUyQjdqazNFSlRNQW9HQ0NxR1NNNDlCQU1DTUdVeEN6QUpCZ05WQkFZVApBbFZUTVJZd0ZBWURWUVFJREExTllYTnpZV05vZFhObGRIUnpNUTh3RFFZRFZRUUhEQVpDYjNOMGIyNHhFakFRCkJnTlZCQW9NQ1ZkaGNtVm9iM1Z6WlRFWk1CY0dBMVVFQXd3UVkyRXVkMkZ5WldodmRYTmxMVzVsZERBZUZ3MHkKTVRFeE1UZ3dOVEU0TlRkYUZ3MHlOREE1TURjd05URTROVGRhTUdVeEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRApWUVFJREExTllYTnpZV05vZFhObGRIUnpNUTh3RFFZRFZRUUhEQVpDYjNOMGIyNHhFakFRQmdOVkJBb01DVmRoCmNtVm9iM1Z6WlRFWk1CY0dBMVVFQXd3UVkyRXVkMkZ5WldodmRYTmxMVzVsZERCWk1CTUdCeXFHU000OUFnRUcKQ0NxR1NNNDlBd0VIQTBJQUJDZC9uelk4K2tHMnF4OEY1ckkyNGh0eE8yTnBYdTdQbVFTbWVDbE1abXhJTExkRApaNWxtVjZwdGdJRFVNUFlLYkR4VzQ3YlVyOWc5d29xV0xXUXpXeE9qUWpCQU1BOEdBMVVkRXdFQi93UUZNQU1CCkFmOHdEZ1lEVlIwUEFRSC9CQVFEQWdHbU1CMEdBMVVkRGdRV0JCVDhHcDFMZzlGc1NTa0xDY2NqWFNpb0ZtY2IKcHpBS0JnZ3Foa2pPUFFRREFnTklBREJGQWlFQWc5UDVKOG9SMHNPSHNvQWFxNS82UzhsWjhsZzNmVkE1V29PdwppWDFBZjRJQ0lFVDNsT2x6RzZWcWI1cVowODFKYUR4cG5WSHpvV21MVXIwSU1UcUFuaVdKCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KEgVhZG1pbiqBBgr1BS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDQXpDQ0FhbWdBd0lCQWdJSkFJdTJCN2prM0VKVE1Bb0dDQ3FHU000OUJBTUNNR1V4Q3pBSkJnTlZCQVlUCkFsVlRNUll3RkFZRFZRUUlEQTFOWVhOellXTm9kWE5sZEhSek1ROHdEUVlEVlFRSERBWkNiM04wYjI0eEVqQVEKQmdOVkJBb01DVmRoY21Wb2IzVnpaVEVaTUJjR0ExVUVBd3dRWTJFdWQyRnlaV2h2ZFhObExXNWxkREFlRncweQpNVEV4TVRnd05URTROVGRhRncweU5EQTVNRGN3TlRFNE5UZGFNR1V4Q3pBSkJnTlZCQVlUQWxWVE1SWXdGQVlEClZRUUlEQTFOWVhOellXTm9kWE5sZEhSek1ROHdEUVlEVlFRSERBWkNiM04wYjI0eEVqQVFCZ05WQkFvTUNWZGgKY21Wb2IzVnpaVEVaTUJjR0ExVUVBd3dRWTJFdWQyRnlaV2h2ZFhObExXNWxkREJaTUJNR0J5cUdTTTQ5QWdFRwpDQ3FHU000OUF3RUhBMElBQkNkL256WTgra0cycXg4RjVySTI0aHR4TzJOcFh1N1BtUVNtZUNsTVpteElMTGREClo1bG1WNnB0Z0lEVU1QWUtiRHhXNDdiVXI5Zzl3b3FXTFdReld4T2pRakJBTUE4R0ExVWRFd0VCL3dRRk1BTUIKQWY4d0RnWURWUjBQQVFIL0JBUURBZ0dtTUIwR0ExVWREZ1FXQkJUOEdwMUxnOUZzU1NrTENjY2pYU2lvRm1jYgpwekFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBZzlQNUo4b1Iwc09Ic29BYXE1LzZTOGxaOGxnM2ZWQTVXb093CmlYMUFmNElDSUVUM2xPbHpHNlZxYjVxWjA4MUphRHhwblZIem9XbUxVcjBJTVRxQW5pV0oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSB29yZGVyZXIaBkFkbWlucyI5CgtFbmRvcnNlbWVudBIqEiAIARIcEggSBggBEgIIABoQEg4KDHdhcmVob3VzZU1TUBoGQWRtaW5zIjUKB1JlYWRlcnMSKhIgCAESHBIIEgYIARICCAAaEBIOCgx3YXJlaG91c2VNU1AaBkFkbWlucyI1CgdXcml0ZXJzEioSIAgBEhwSCBIGCAESAggAGhASDgoMd2FyZWhvdXNlTVNQGgZBZG1pbnMiNgoGQWRtaW5zEiwSIggBEh4SCBIGCAESAggAGhISEAoMd2FyZWhvdXNlTVNQEAEaBkFkbWlucyoGQWRtaW5zGkAKFUNoYW5uZWxDcmVhdGlvblBvbGljeRInEgwIAxIICgZBZG1pbnMaFy9DaGFubmVsL09yZGVyZXIvQWRtaW5zKhcvQ2hhbm5lbC9PcmRlcmVyL0FkbWlucyItCgZBZG1pbnMSIxIICAESBBICEgAaFy9DaGFubmVsL09yZGVyZXIvQWRtaW5zKhcvQ2hhbm5lbC9PcmRlcmVyL0FkbWlucxomChBIYXNoaW5nQWxnb3JpdGhtEhISCAoGU0hBMjU2GgZBZG1pbnMaLQoZQmxvY2tEYXRhSGFzaGluZ1N0cnVjdHVyZRIQEgYI/////w8aBkFkbWlucxpOChBPcmRlcmVyQWRkcmVzc2VzEjoSHwodb3JkZXJlcjEuc3VwcGx5Y2hhaW4tbmV0OjcwNTAaFy9DaGFubmVsL09yZGVyZXIvQWRtaW5zGiYKDENhcGFiaWxpdGllcxIWEgwKCgoGVjFfNF8zEgAaBkFkbWlucyIiCgZBZG1pbnMSGBIOCAMSCgoGQWRtaW5zEAIaBkFkbWlucyIiCgdSZWFkZXJzEhcSDQgDEgkKB1JlYWRlcnMaBkFkbWlucyIiCgdXcml0ZXJzEhcSDQgDEgkKB1dyaXRlcnMaBkFkbWlucyoGQWRtaW5zGgoKAAoACgAKAAoA
